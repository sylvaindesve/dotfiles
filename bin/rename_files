#!/usr/bin/env node

const fs = require("fs");
const util = require("util");

const readdir = util.promisify(fs.readdir);
const rename = util.promisify(fs.rename);

const readline = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout
});

function ask(question_string) {
  return new Promise((resolve, reject) => {
    readline.question(question_string, name => {
      resolve(name);
      readline.close();
    });
  });
}

async function preview(regexp, replace) {
  let files;
  try {
    files = await readdir(".");
  } catch (err) {
    console.log(err);
  }
  if (files === undefined) {
    console.log("undefined");
  } else {
    files.forEach(file => {
      console.log(file + " => " + file.replace(regexp, replace));
    });
  }
}

async function doRenameFiles(regexp, replace) {
  let files;
  try {
    files = await readdir(".");
  } catch (err) {
    console.log(err);
  }
  if (files === undefined) {
    console.log("undefined");
  } else {
    files.forEach(async file => {
      await rename(file, file.replace(regexp, replace));
    });
  }
}

(async () => {
  if (process.argv.length !== 4) {
    process.stderr.write("Usage: rename_files search_regex, replace_string\n");
    process.exit(1);
  } else {
    const [, , search_regex, replace_string, ...remaining_args] = process.argv;
    const search = new RegExp(search_regex);
    await preview(search, replace_string);
    const ok = await ask("If OK, type OK:");
    if (ok === "OK") {
      console.log("Renaming...");
      await doRenameFiles(search, replace_string);
      console.log("DONE");
    } else {
      console.log("ABORTED");
    }
  }
})();
